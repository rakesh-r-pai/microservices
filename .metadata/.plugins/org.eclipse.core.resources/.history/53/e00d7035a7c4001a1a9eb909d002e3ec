package com.banking.service.customeraccountmanagementservice.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.banking.service.customeraccountmanagementservice.model.ExternalAccountBean;
import com.banking.service.customeraccountmanagementservice.model.InternalAccountBean;
import com.banking.service.customeraccountmanagementservice.service.ExternalAccountServiceProxy;
import com.banking.service.customeraccountmanagementservice.service.InternalAccountServiceProxy;

@RunWith(PowerMockRunner.class)
@PrepareForTest
public class CustomerAccountsControllerTest {
	
	@InjectMocks
	private CustomerAccountsController controller;
	
	@Mock
	private InternalAccountServiceProxy internalProxy;
	
	@Mock
	private ExternalAccountServiceProxy externalProxy;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testFetchAccounts() {
		InternalAccountBean internalAccount = populateInternalAccount();
		List<ExternalAccountBean> externalAccounts = populateExternalAccounts();
		Mockito.when(internalProxy.fetchAccountDetails()).thenReturn(internalAccount);
		Mockito.when(externalProxy.fetchBeneficiaries()).thenReturn(externalAccounts);
		controller.fetchAccounts();
	}

	private List<ExternalAccountBean> populateExternalAccounts() {
		List<ExternalAccountBean> extAccounts = new ArrayList<>();
		ExternalAccountBean externalAccountBean = new ExternalAccountBean();
		externalAccountBean.setAccountNumber("1010202030");
		externalAccountBean.setBankName("ABC Bank");
		externalAccountBean.setBeneficiaryName("Raplphestine");
		externalAccountBean.setBeneficiaryNickName("Ralph");
		externalAccountBean.setBranchCode("ABC01");
		externalAccountBean.setId(2L);
		extAccounts.add(externalAccountBean);
		return extAccounts;
	}

	private InternalAccountBean populateInternalAccount() {
		InternalAccountBean internalBean = new InternalAccountBean();
		internalBean.setAccountBalance(new BigDecimal(5500.00));
		internalBean.setAccountNumber("2020303010");
		internalBean.setBankName("XYC Bank");
		return internalBean;
	}
}

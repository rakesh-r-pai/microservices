package com.banking.service.zuulapigatewayserver;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.banking.service.common.JWTAuthenticationConfig;
import com.banking.service.common.JWTTokenAuthenticationFilter;

@EnableWebSecurity
public class ZuulSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private JWTAuthenticationConfig config;

	@Bean
	public JWTAuthenticationConfig jwtConfig() {
		return new JWTAuthenticationConfig();
	}

	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
		httpSecurity.csrf().disable().logout().disable().formLogin().disable().sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().anonymous().and().exceptionHandling()
				.authenticationEntryPoint((req, rsp, e) -> rsp.sendError(HttpServletResponse.SC_UNAUTHORIZED)).and()
				.addFilterAfter(new JWTTokenAuthenticationFilter(config), UsernamePasswordAuthenticationFilter.class)
				.authorizeRequests().antMatchers(config.getUrl()).permitAll().antMatchers("/customer/*").authenticated()
				//.hasRole("USER")
				.antMatchers("/internal/*").authenticated().antMatchers("/external/**")
				.authenticated();
	}
}
